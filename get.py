#!python 3.6.2 or greater
# import all necessary packages
import datetime, csv, os, shutil, time, fnmatch, sys, json
import glob
from pathlib import Path
import traceback
from collections import OrderedDict

# request drop location
stageSend = Path('//gscfile01/SharedFile/QA_MVC/STG1/adh_receive')

# response file location
stageReceive = Path('//gscfile01/SharedFile/QA_MVC/STG1/adh_send')

# current directory
currentDirectory = Path(os.getcwd())

currentDate = '23JUN18'


# ############################## functions ##########################

# Check if adhoc folders are visible from the current machine
def check_if_folder_exist(location):
    if os.path.exists(location):
        print(f'[ {location} ] folder found')
    else:
        print(f'Could not find [ {location} ] folder!')
        print(f'make sure [ {location} ] is available from this machine!')
        sys.exit("Stopping script .......")



# check for response csv, if exist copy to current directory for parsing
def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
    # note that repeat is needed since the adhoc processor sometimes does not return csv.
    # get current timestamp
    sendPattern = f'MCEG_DATA*.txt'
    timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    sentFiles = os.listdir(send_folder)
    if fnmatch.filter(sentFiles, sendPattern):
      print('There are request files waiting on que, adhoc processor may be down')
    else:
      request_file = open(f'{send_folder}/MCEG_DATA_ADHOC4_{timeStamp}.txt', 'w')
      request_file.write(f'ADH004_{current_date}')
      adh004String = f'ADH004_{current_date}'
      request_file.close()
      print(f' Sending adhoc 4 request using: {adh004String}')
      time.sleep(15)
    # check if the file exist
    receivedFiles = os.listdir(receive_folder)
    receivePattern = f'MCEG_DATA_ADHOC4_{timeStamp}*.csv'
    # for file in os.listdir(receive_folder):
    # if fnmatch.fnmatch(file, pattern) == True:
    if fnmatch.filter(receivedFiles, receivePattern):
        file_name = fnmatch.filter(receivedFiles, receivePattern)
        print(file_name[0])
        print(f'csv file for adhoc 4 found')
        # Copy file
        shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/DATA/data.csv')
        print("csv file copied to local folder for parsing")
        # remove all files that was generated by this script.
        for csvfile in os.listdir(receive_folder):
          if fnmatch.fnmatch(csvfile, 'MCEG_DATA_ADHOC4*.csv'):
              os.remove(f'{receive_folder}/{csvfile}')


        # add header row
        with open(f'{local_directory}/DATA/data.csv',newline='') as f:
            r = csv.reader(f)
            data = [line for line in r]
        with open(f'{local_directory}/DATA/data.csv','w',newline='') as f:
            w = csv.writer(f)
            w.writerow(['recordStatus',
                        'lastDateModified',
                        'lastTimeModified',
                        'lastUserToModify',
                        'legDepartureDate',
                        'airlineCode',
                        'identifier',
                        'sequence',
                        'flightOriginDay',
                        'numericFlightDate',
                        'numGMTDate',
                        'STDudt',
                        'STAudt',
                        'tailNumber',
                        'numLastDateModified',
                        'flightStatus',
                        'origin',
                        'STDLocal',
                        'dispatchDesk',
                        'STDGMTVariance',
                        'destination',
                        'STALocal',
                        'STAGMTVariance',
                        'OAGEquipmentType',
                        'ACConfiguration',
                        'serviceType',
                        'originGate',
                        'ETDlocal',
                        'ETDudt',
                        'TAXIutc',
                        'OUTudt',
                        'OFFudt',
                        'destinationGate',
                        'ETAlocal',
                        'ETAudt',
                        'ONudt',
                        'INudt',
                        'previousTailNumber',
                        'ETE',
                        'DCNutc',
                        'ETOutc',
                        'EONutc',
                        'EDTCutc',
                        'flightType',
                        'newDepartureCity',
                        'newArrivalCity',
                        'SchedOAGEquipType',
                        'OAGEquipSubType',
                        'csvFSDailyID',
                        'tailNumBeforeCancel',
                        'CTAUTC',
                        'cancelled',
                        'replaced',
                        'ATCStatus',
                        'scheduledFlightType',
                        'aircraftRouting',
                        'mealService',
                        'hub',
                        'landingRestriction',
                        'headStartFlight',
                        'actualDeparture',
                        'specialFlight',
                        'actualArrival',
                        'scheduledTaxiOut',
                        'scheduledTaxiIn',
                        'STOSetByUser',
                        'STISetByUser',
                        'CTFlightNumber'])
            w.writerows(data)
        with open(f'{local_directory}/DATA/data.csv') as f:
          reader = csv.DictReader(f)
          rows = list(reader)

        with open(f'{local_directory}/DATA/data.json', 'w') as f:
            json.dump(rows, f)


    else:
        # if file is not available abort the script
        print(f'Did not find csv file for adhoc 4')
        print('Check if the adhoc processor is down')
        pass

check_if_folder_exist(stageReceive)

call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)

